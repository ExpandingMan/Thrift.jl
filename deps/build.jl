using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "thrift", :thrift),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/tanmaykm/JuliaThriftBuilder/releases/download/julia0.6-thrift0.11.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.aarch64-linux-gnu.tar.gz", "73066406aca35f3a76edc0a376a699b308a77251adae30791ddecd608902bcaf"),
    Linux(:aarch64, :musl) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.aarch64-linux-musl.tar.gz", "f93fc421bb0c2902b4f884dd99ba550bb420185d039210d93d9b9ae1235a367b"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.arm-linux-gnueabihf.tar.gz", "62e3794ce899e7222eb71192b8e797cc5f4c9a10cd933318a774e78e7601ad09"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.arm-linux-musleabihf.tar.gz", "a2a8a71716fc44c932fe39734af7c055d232c13b239fe2fc2836b6f5259081aa"),
    Linux(:i686, :glibc) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.i686-linux-gnu.tar.gz", "7cfb641f12112aae103cd42a4883a8fd144a420df26e3d9c518201cf2f26f6e3"),
    Linux(:i686, :musl) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.i686-linux-musl.tar.gz", "e72f0b8c549417292d1c4ec44a2489ad21ce11eaf5b0805a905cd24268b3ffe9"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.powerpc64le-linux-gnu.tar.gz", "10f2831be314135cdcb19f348aa4e826c9b33143c151867d9c2e36ef7c75d7db"),
    MacOS(:x86_64) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.x86_64-apple-darwin14.tar.gz", "ac7cc41fd05b9ff64a911fe9340cc1a1485044c9f95ddca6e26c9271fe86e23b"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.x86_64-linux-gnu.tar.gz", "165d388d3aec5c4b556505e465a5b8f1f66150bc7ccf35b4dff9fcf733f7a0a5"),
    Linux(:x86_64, :musl) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.x86_64-linux-musl.tar.gz", "8a8bb44ffb53102baccdc7b37478d369d79f228d1fb0791a3de38dae9301ec83"),
    FreeBSD(:x86_64) => ("$bin_prefix/JuliaThriftBuilder.v1.0.0.x86_64-unknown-freebsd11.1.tar.gz", "794a50c4821f7240d132bd1e81cb29a3b2fda734e7d36ad899499f6d01c8b0b9"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
